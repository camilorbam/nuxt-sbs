@mixin font-face($name:null,$file:null,$svg:null,$style:normal,$weight:normal,$legibility:optimizeLegibility) {
  @if ($name & $file & $svg) {
    @font-face {
      font-family: $name;
      src: url('#{$file + '.eot' }'); /* IE9 Compat Modes */
      src: url('#{$file +'.eot?#iefix' }') format('embedded-opentype'), /* IE6-IE8 */
      url('#{$file +'.woff' }') format('woff'), /* Modern Browsers */
      url('#{$file +'.ttf' }') format('truetype'), /* Safari, Android, iOS */
      url('#{$file +'.svg#'+ $svg}') format('svg'); /* Legacy iOS */
      font-style: $style;
      font-weight: $weight;
      text-rendering: $legibility;
    }
  }
}

@mixin inline-block() {
  display: -moz-inline-stack;
  display: inline-block;
  vertical-align: top;
  zoom: 1;
  *display: inline;
}

@mixin flex-align($h:center,$v:center,$t:center) {
  display: flex;
  text-align: $t;
  justify-content: $h;
  align-items: $v;
}

@mixin media($media) {
  @media (max-width: $media) { @content; }
}

@mixin close-svg($color:#000000) {
  background: url("data:image/svg+xml,%3Csvg version='1.1' id='layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='27px' height='27px' viewBox='0 0 27 27' style='enable-background:new 0 0 27 27;' xml:space='preserve'%3E%3Cdefs%3E%3Cfilter id='fsvg' x='0' y='0' width='150%25' height='150%25'%3E%3CfeOffset result='offOut' in='SourceAlpha' dx='0' dy='0' /%3E%3CfeGaussianBlur result='blurOut' in='offOut' stdDeviation='0.7' /%3E%3CfeBlend in='SourceGraphic' in2='blurOut' mode='normal' /%3E%3C/filter%3E%3C/defs%3E%3Cg%3E%3Cpath d='M 12.969 8.47 L 4.677 0.178 L 0.154 4.702 L 8.558 13.106 L 0 21.663 L 4.201 25.864 L 12.941 17.124 L 21.545 25.928 L 25.793 21.68 L 17.207 13.094 L 25.848 4.453 L 21.395 0 L 12.969 8.47' fill='%23" + str-slice(inspect($color), 2, 7) + "' filter='url(%23fsvg)'/%3E%3C/g%3E%3C/svg%3E%0A") no-repeat !important;
}

@mixin arrow-svg($color:#000000,$flip:false, $bgImage:false) {
  $svg: url("data:image/svg+xml,%3Csvg version='1.1' id='layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='23px' height='37px' viewBox='0 0 23 37' style='enable-background:new 0 0 23 37;' xml:space='preserve'%3E%3Cdefs%3E%3Cfilter id='fsvg" + str-slice(inspect($color), 2, 7) + "' x='0' y='0' width='150%25' height='150%25'%3E%3CfeOffset result='offOut' in='SourceAlpha' dx='0' dy='0' /%3E%3CfeGaussianBlur result='blurOut' in='offOut' stdDeviation='0.4' /%3E%3CfeBlend in='SourceGraphic' in2='blurOut' mode='normal' /%3E%3C/filter%3E%3C/defs%3E%3Cg%3E%3Cpath d='M 22.819 18.745 L 5.036 0.583 C 4.477 0.291 3.918 0 3.22 0.053 C 2.522 0.107 1.824 0.161 1.252 0.659 C 0.681 1.157 0.235 2.098 0.117 2.778 C 0 3.457 0.21 3.874 0.42 4.291 L 15.107 18.501 L 0.95 32.82 C 0.745 33.272 0.54 33.724 0.647 34.257 C 0.755 34.79 1.175 35.404 1.631 35.846 C 2.087 36.289 2.578 36.559 3.069 36.83 C 3.56 37.101 4.487 36.739 5.414 36.376 L 22.819 18.745 Z' fill='%23" + str-slice(inspect($color), 2, 7) + "' filter='url(%23fsvg" + str-slice(inspect($color), 2, 7) + ")'/%3E%3C/g%3E%3C/svg%3E%0A") !default;

  @if ($flip) {
    $svg: url("data:image/svg+xml,%3Csvg version='1.1' id='layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='23px' height='37px' viewBox='0 0 23 37' style='enable-background:new 0 0 23 37;' xml:space='preserve'%3E%3Cdefs%3E%3Cfilter id='fsvg" + str-slice(inspect($color), 2, 7) + "' x='0' y='0' width='150%25' height='150%25'%3E%3CfeOffset result='offOut' in='SourceAlpha' dx='0' dy='0' /%3E%3CfeGaussianBlur result='blurOut' in='offOut' stdDeviation='0.4' /%3E%3CfeBlend in='SourceGraphic' in2='blurOut' mode='normal' /%3E%3C/filter%3E%3C/defs%3E%3Cg%3E%3Cpath d='M 0 18.356 L 17.783 36.518 C 18.342 36.81 18.901 37.101 19.599 37.048 C 20.297 36.994 20.995 36.94 21.567 36.442 C 22.138 35.944 22.584 35.003 22.702 34.323 C 22.819 33.644 22.609 33.227 22.399 32.81 L 7.712 18.6 L 21.869 4.281 C 22.074 3.829 22.279 3.377 22.172 2.844 C 22.064 2.311 21.644 1.697 21.188 1.255 C 20.732 0.812 20.241 0.542 19.75 0.271 C 19.259 0 18.332 0.362 17.405 0.725 L 0 18.356 Z ' fill='%23" + str-slice(inspect($color), 2, 7) + "' filter='url(%23fsvg" + str-slice(inspect($color), 2, 7) + ")'/%3E%3C/g%3E%3C/svg%3E%0A");
  }

  @if ($bgImage) {
    background-image: $svg;
    background-repeat: no-repeat;
  } @else {
    background: #{$svg + ' no-repeat !important'};
  }
}

@mixin loading-svg($color:#a1a1a1,$color2:#ffffff) {
  background: url("data:image/svg+xml,%3Csvg version='1.1' id='layer_1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' x='0px' y='0px' width='32px' height='32px' viewBox='0 0 42 42' style='enable-background:new 0 0 42 42;' xml:space='preserve'%3E%3Cdefs%3E%3ClinearGradient id='linsvg" + str-slice(inspect($color), 2, 7) + str-slice(inspect($color2), 2, 7) + "' x1='0' y1='1' x2='1' y2='0'%3E%3Cstop offset='0%25' stop-color='%23" + str-slice(inspect($color), 2, 7) + "'%3E%3C/stop%3E%3Cstop offset='100%25' stop-color='%23" + str-slice(inspect($color2), 2, 7) + "'%3E%3C/stop%3E%3C/linearGradient%3E%3C/defs%3E%3Cg%3E%3Cpath d='M 29 7 a 16 16 0 0 1 -16 28' fill='none' stroke='url(%23linsvg" + str-slice(inspect($color), 2, 7) + str-slice(inspect($color2), 2, 7) + ")' stroke-width='6' /%3E%3Cpath d='M 13.1 35.1 a 16 16 0 0 1 -7.5 -10' fill='none' stroke='%23" + str-slice(inspect($color), 2, 7) + "' stroke-width='6' /%3E%3C/g%3E%3C/svg%3E%0A");
}

@mixin sprite-svg($sprite) {
  background: url($spritesheet-svg+$sprite) center / cover no-repeat;
}

@mixin fluid-type($properties, $min-vw, $max-vw, $min-value, $max-value) {
  @each $property in $properties {
    #{$property}: $min-value;
  }

  @media (min-width: $min-vw) {
    @each $property in $properties {
      #{$property}: calc(
        #{$min-value} +
          #{strip-unit($max-value - $min-value)} *
          (100vw - #{$min-vw}) /
          #{strip-unit($max-vw - $min-vw)}
      );
    }
  }

  @media (min-width: $max-vw) {
    @each $property in $properties {
      #{$property}: $max-value;
    }
  }
}

@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return $number / ($number * 0 + 1);
  }

  @return $number;
}
